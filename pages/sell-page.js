import Head from 'next/head'
import { Button, Form, useNotification } from 'web3uikit'
import {ethers} from 'ethers'
import nftAbi from '../constants/BasicNft.json'
import NftMarketplaceAbi from '../constants/NftMarketplace.json'
import networkMapping from '../constants/networkMapping.json'
import { useMoralis, useWeb3Contract } from 'react-moralis'
import { useEffect, useState } from 'react'

export default function Home() {

  const {isWeb3Enabled, chainId, account} = useMoralis();
  const chainIdString = chainId ? parseInt(chainId).toString() : '31337';
  const marketPlaceAddress = networkMapping[chainIdString].NftMarketplace[0]
  const [proceeds, setProceeds] = useState("0")
  const dispatch = useNotification();

  const { runContractFunction } = useWeb3Contract();

  async function approveAndSell(data) {
    const nftAddress = data.data[0].inputResult;
    const tokenId = data.data[1].inputResult;
    const price = ethers.utils.parseUnits(data.data[2].inputResult, 'ether').toString();
    
    console.log(nftAddress, tokenId, price);

    const approveOptions = {
      abi: nftAbi,
      contractAddress: nftAddress,
      functionName: "approve",
      params:{
        to: marketPlaceAddress,
        tokenId: tokenId
      }
    }

    await runContractFunction({
      params: approveOptions,
      onError: (error) =>  {
        alert("Transaction Faild!");
        console.log(error)
      },
      onSuccess: (tx) => handleApproveSuccess(tx, nftAddress, tokenId, price)
    })

  }

  async function handleApproveSuccess(tx, nftAddress, tokenId, price) {
      dispatch({
        type: "Success",
        message: "Please wait for the transaction to be mined before listing the item",
        title: "Approve Trasaction Sent",
        position: 'topR'
      })
      console.log(tx)
      await tx.wait()
      console.log("approve success now sell");
      const listOptions = {
        abi: NftMarketplaceAbi,
        contractAddress: marketPlaceAddress,
        functionName: "listItem",
        params:{
          nftAddress: nftAddress,
          tokenId: tokenId,
          price: price
        }
      }
      await runContractFunction({
        params: listOptions,
        onError: (error) => {
          alert("Transaction Faild!");
          console.log(error)
        },
        onSuccess: () => handleListSuccess()
      });

  }

  async function handleListSuccess() {
    dispatch({
      type: "success",
      message: "NFT Listed - Please wait for the transaction to be mined",
      title: "NFT Listed successfully",
      position: 'topR'
    })
  }

  const handleWithdrawSuccess = async (tx) => {
    await tx.wait(1)
    dispatch({
        type: "success",
        message: "Withdrawing proceeds",
        position: "topR",
    })
  }

  async function setupUI() {
    const returnedProceeds = await runContractFunction({
        params: {
            abi: NftMarketplaceAbi,
            contractAddress: marketPlaceAddress,
            functionName: "getProceeds",
            params: {
                seller: account,
            },
        },
        onError: (error) => console.log(error),
    })
    if (returnedProceeds) {
        setProceeds(returnedProceeds.toString())
    }
  }

  useEffect(() => {
      if(isWeb3Enabled){
          setupUI()
      }
  }, [proceeds, account, isWeb3Enabled, chainId])


  return (

    <div className="container mx-auto flex justify-around flex-wrap p-5 flex-col md:flex-row">
      <Head>
        <title>Sell NFT | NFT MarketPlace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Form
        onSubmit={approveAndSell}
       data={[
        {
          name: "NFT Address",
          type: "text",
          inputWidth: "50%",
          value:"",
          key:"nftAddress",
        },
        {
          name: "Token ID",
          type: "number",
          value: "",
          key: "tokenId",
        },
        {
          name: "Price (in ETH)",
          type: "number",
          value: "",
          key: "price",
        }

      ]}
      title="Sell your NFT" id="Main Form" />
      <div className='p-4'>
        <div className='fAuTDr'>Withdraw your Proceeds</div>
          {proceeds != "0" ? (
            <div className='flex gap-3'>
              <div className='font-bold text-slate-500'>Proceeds: {ethers.utils.formatUnits(proceeds, 'ether')} ETH</div>
              <Button
                  onClick={() => {
                      runContractFunction({
                          params: {
                              abi: NftMarketplaceAbi,
                              contractAddress: marketPlaceAddress,
                              functionName: "withdrawProceeds",
                              params: {},
                          },
                          onError: (error) => console.log(error),
                          onSuccess: handleWithdrawSuccess,
                      })
                  }}
                  text="Withdraw"
                  type="button"
              />
            </div>
          ) : (
              <div>No proceeds detected</div>
          )}
        </div>
    </div>

    
    
  )
}
